/**
* World Storage API
* API ensuring interoperability between an authoring tool and a World Storage service
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * WorldAnchorsApi.h
 *
 * 
 */

#ifndef WorldAnchorsApi_H_
#define WorldAnchorsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "model/Error.h"
#include "Object.h"
#include <string>

namespace org::openapitools::server::api
{

class  WorldAnchorsApi {
public:
    explicit WorldAnchorsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~WorldAnchorsApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void add_world_anchor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void world_anchors_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Create a world anchor
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="creatorUID">A Universally Unique IDentifier identifying the creator of the world anchor</param>
    /// <param name="unitSystem">Unit of length</param>
    /// <param name="keyvalueTagList">List of additional parameters to be stored with the world anchor. (optional, default to std::map&lt;std::string, Object&gt;())</param>
    virtual void add_world_anchor(const std::optional<std::string> &creatorUID, const std::optional<std::string> &unitSystem, const std::optional<std::map<std::string, Object>> &keyvalueTagList, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* WorldAnchorsApi_H_ */

