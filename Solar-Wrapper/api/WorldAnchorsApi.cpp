/**
* World Storage API
* API ensuring interoperability between an authoring tool and a World Storage service
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "WorldAnchorsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string WorldAnchorsApi::base = "";

WorldAnchorsApi::WorldAnchorsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void WorldAnchorsApi::init() {
    setupRoutes();
}

void WorldAnchorsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/worldAnchors", Routes::bind(&WorldAnchorsApi::add_world_anchor_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&WorldAnchorsApi::world_anchors_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> WorldAnchorsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

std::pair<Pistache::Http::Code, std::string> WorldAnchorsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void WorldAnchorsApi::add_world_anchor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto creatorUIDQuery = request.query().get("creatorUID");
    std::optional<std::string> creatorUID;
    if(creatorUIDQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(creatorUIDQuery.value(), valueQuery_instance)){
            creatorUID = valueQuery_instance;
        }
    }
    auto unitSystemQuery = request.query().get("unitSystem");
    std::optional<std::string> unitSystem;
    if(unitSystemQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(unitSystemQuery.value(), valueQuery_instance)){
            unitSystem = valueQuery_instance;
        }
    }
    auto keyvalueTagListQuery = request.query().get("keyvalueTagList");
    std::optional<> keyvalueTagList;
    if(keyvalueTagListQuery.has_value()){
         valueQuery_instance;
        if(fromStringValue(keyvalueTagListQuery.value(), valueQuery_instance)){
            keyvalueTagList = valueQuery_instance;
        }
    }
    
    try {
        this->add_world_anchor(creatorUID, unitSystem, keyvalueTagList, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void WorldAnchorsApi::world_anchors_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

