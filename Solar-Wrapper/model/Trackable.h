/**
* World Storage API
* API ensuring interoperability between an authoring tool and a World Storage service
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Trackable.h
 *
 * 
 */

#ifndef Trackable_H_
#define Trackable_H_


#include "TrackableEncodingInformationStructure.h"
#include <string>
#include <map>
#include <vector>
#include "Transform3d.h"
#include <model/nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Trackable
{
public:
    Trackable();
    virtual ~Trackable() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Trackable& rhs) const;
    bool operator!=(const Trackable& rhs) const;

    /////////////////////////////////////////////
    /// Trackable members

    /// <summary>
    /// A Universally Unique IDentifier identifying the creator of the trackable
    /// </summary>
    std::string getCreatorUID() const;
    void setCreatorUID(std::string const& value);
    /// <summary>
    /// Extensible list of trackable types possibly handled by complient World Storage implementation
    /// </summary>
    std::string getTrackabletype() const;
    void setTrackabletype(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    TrackableEncodingInformationStructure getTrackableEncodingInformation() const;
    void setTrackableEncodingInformation(TrackableEncodingInformationStructure const& value);
    /// <summary>
    /// The data provided to create the trackable in a specific format handled by the World Storage service.
    /// </summary>
    std::vector<std::string> getPayload() const;
    void setPayload(std::vector<std::string> const& value);
    /// <summary>
    /// Unit of length
    /// </summary>
    std::string getUnitsystem() const;
    void setUnitsystem(std::string const& value);
    /// <summary>
    /// Bounding box of the Trackable, {width, length, 0} for 2D trackables, {width, length, depth} for 3D trackables
    /// </summary>
    std::vector<int32_t> getTrackableDimension() const;
    void setTrackableDimension(std::vector<int32_t> const value);
    /// <summary>
    /// 
    /// </summary>
    Transform3d getLocalcrs() const;
    void setLocalcrs(Transform3d const& value);
    /// <summary>
    /// List of additional parameters to be stored with the trackable.
    /// </summary>
    std::map<std::string, std::string> getKeyvalueTagList() const;
    void setKeyvalueTagList(std::map<std::string, std::string> const& value);
    bool keyvalueTagListIsSet() const;
    void unsetKeyvalueTagList();

    friend void to_json(nlohmann::json& j, const Trackable& o);
    friend void from_json(const nlohmann::json& j, Trackable& o);
protected:
    std::string m_CreatorUID;

    std::string m_Trackabletype;

    TrackableEncodingInformationStructure m_TrackableEncodingInformation;

    std::vector<std::string> m_Payload;

    std::string m_Unitsystem;

    std::vector<int32_t> m_TrackableDimension;

    Transform3d m_Localcrs;

    std::map<std::string, std::string> m_KeyvalueTagList;
    bool m_KeyvalueTagListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Trackable_H_ */
