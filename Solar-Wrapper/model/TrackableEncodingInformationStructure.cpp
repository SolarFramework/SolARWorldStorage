/**
* World Storage API
* API ensuring interoperability between an authoring tool and a World Storage service
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TrackableEncodingInformationStructure.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TrackableEncodingInformationStructure::TrackableEncodingInformationStructure()
{
    m_DataFormat = "";
    m_Version = "";
    
}

void TrackableEncodingInformationStructure::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TrackableEncodingInformationStructure::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TrackableEncodingInformationStructure::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TrackableEncodingInformationStructure" : pathPrefix;

            
    return success;
}

bool TrackableEncodingInformationStructure::operator==(const TrackableEncodingInformationStructure& rhs) const
{
    return
    
    
    (getDataFormat() == rhs.getDataFormat())
     &&
    
    (getVersion() == rhs.getVersion())
    
    
    ;
}

bool TrackableEncodingInformationStructure::operator!=(const TrackableEncodingInformationStructure& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TrackableEncodingInformationStructure& o)
{
    j = nlohmann::json();
    j["dataFormat"] = o.m_DataFormat;
    j["version"] = o.m_Version;
    
}

void from_json(const nlohmann::json& j, TrackableEncodingInformationStructure& o)
{
    j.at("dataFormat").get_to(o.m_DataFormat);
    j.at("version").get_to(o.m_Version);
    
}

std::string TrackableEncodingInformationStructure::getDataFormat() const
{
    return m_DataFormat;
}
void TrackableEncodingInformationStructure::setDataFormat(std::string const& value)
{
    m_DataFormat = value;
}
std::string TrackableEncodingInformationStructure::getVersion() const
{
    return m_Version;
}
void TrackableEncodingInformationStructure::setVersion(std::string const& value)
{
    m_Version = value;
}


} // namespace org::openapitools::server::model

