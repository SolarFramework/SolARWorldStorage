/**
* World Storage API
* API ensuring interoperability between an authoring tool and a World Storage service
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TrackableEncodingInformationStructure.h
 *
 * Identifies targeted framework and version of the format.
 */

#ifndef TrackableEncodingInformationStructure_H_
#define TrackableEncodingInformationStructure_H_


#include <string>
#include <model/nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Identifies targeted framework and version of the format.
/// </summary>
class  TrackableEncodingInformationStructure
{
public:
    TrackableEncodingInformationStructure();
    virtual ~TrackableEncodingInformationStructure() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TrackableEncodingInformationStructure& rhs) const;
    bool operator!=(const TrackableEncodingInformationStructure& rhs) const;

    /////////////////////////////////////////////
    /// TrackableEncodingInformationStructure members

    /// <summary>
    /// Identifier of the target framework
    /// </summary>
    std::string getDataFormat() const;
    void setDataFormat(std::string const& value);
    /// <summary>
    /// The version of the format
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string const& value);

    friend void to_json(nlohmann::json& j, const TrackableEncodingInformationStructure& o);
    friend void from_json(const nlohmann::json& j, TrackableEncodingInformationStructure& o);
protected:
    std::string m_DataFormat;

    std::string m_Version;

    
};

} // namespace org::openapitools::server::model

#endif /* TrackableEncodingInformationStructure_H_ */
