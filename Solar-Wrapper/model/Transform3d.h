/**
* World Storage API
* API ensuring interoperability between an authoring tool and a World Storage service
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Transform3d.h
 *
 * a 3D transformation in the form of a matrix of numbers.
 */

#ifndef Transform3d_H_
#define Transform3d_H_


#include <vector>
#include <model/nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// a 3D transformation in the form of a matrix of numbers.
/// </summary>
class  Transform3d
{
public:
    Transform3d();
    virtual ~Transform3d() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Transform3d& rhs) const;
    bool operator!=(const Transform3d& rhs) const;

    /////////////////////////////////////////////
    /// Transform3d members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::vector<double>> getPayload() const;
    void setPayload(std::vector<std::vector<double>> const& value);
    bool payloadIsSet() const;
    void unsetPayload();
    /// <summary>
    /// 
    /// </summary>
    int32_t getColumnsize() const;
    void setColumnsize(int32_t const value);
    bool columnsizeIsSet() const;
    void unsetColumnsize();
    /// <summary>
    /// 
    /// </summary>
    int32_t getRowsize() const;
    void setRowsize(int32_t const value);
    bool rowsizeIsSet() const;
    void unsetRowsize();

    friend void to_json(nlohmann::json& j, const Transform3d& o);
    friend void from_json(const nlohmann::json& j, Transform3d& o);
protected:
    std::vector<std::vector<double>> m_Payload;
    bool m_PayloadIsSet;
    int32_t m_Columnsize;
    bool m_ColumnsizeIsSet;
    int32_t m_Rowsize;
    bool m_RowsizeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Transform3d_H_ */
