#ifndef WORLDANCHORSSOLARIMPL_H
#define WORLDANCHORSSOLARIMPL_H

#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <WorldAnchorsApi.h>


#include <Error.h>
#include "api/storage/IWorldGraphManager.h"
#include <string>

namespace org::openapitools::server::implem
{

using namespace org::openapitools::server::model;


/**
 * @class WorldAnchorsSolARImpl
 * @brief implementation of WorldAnchorsAPI (class generated by OpenAPI-Generator), implements all the method defined with the tag 'world anchors' in the API specification
 *
 */

class WorldAnchorsSolARImpl : public org::openapitools::server::api::WorldAnchorsApi {
    public:
        explicit WorldAnchorsSolARImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr, SRef<SolAR::api::storage::IWorldGraphManager> worldStorage);
        ~WorldAnchorsSolARImpl() override = default;


        /// @brief API method to add a world anchor to the world storage. It converts the World anchor into a StorageWorldAnchor and stores it in the worldGraph manager
        /// @param worldAnchor : worldAnchor to be added
        /// @param response : the response to be sent : if it succeeds, the UUID of the newly created StorageWorldAnchor
        void add_world_anchor(const WorldAnchor &worldAnchor, Pistache::Http::ResponseWriter &response) override;

        /// @brief API method to delete a world anchor, it fetches the StorageWorldAnchor in the world storage Manager and removes it
        /// @param worldAnchorUUID : the ID of the StorageWorldAnchor to be removed
        /// @param response : the response to be sent : if it succeeds, a confirmation of the deletion of the StorageWorldAnchor
        void delete_world_anchor(const std::string &worldAnchorUUID, Pistache::Http::ResponseWriter &response) override;

        /// @brief API method to get a single StorageWorldAnchor from the world storage
        /// @param worldAnchorUUID : the ID of the world anchor to be fetched
        /// @param response : the response to be sent : if it succeeds, a JSON containing all the informations from the StorageWorldAnchor
        void get_world_anchor_by_id(const std::string &worldAnchorUUID, Pistache::Http::ResponseWriter &response) override;

        /// @brief API method to get all the world anchors currently stored in the world storage
        /// @param response : the response to be sent : if it succeeds, a JSON containing all the informations from all the StorageWorldAnchor
        void get_world_anchors(Pistache::Http::ResponseWriter &response) override;

        /// @brief static method to convert StorageWorldAnchor (defined by the SolAR framework) to a world anchors (defined by OpenAPI generator)
        /// @param worldAnchor : the StorageWorldAnchor to be converted
        /// @return the converted world anchor
        static WorldAnchor fromStorage(SolAR::datastructure::StorageWorldAnchor worldAnchor);

        /// @brief initialize the API handler, creates the singleton m_worldStorage if it is not already done
        void init();

     private:
        /// @brief the instance of the world storage manager that will be used to handle the queries
        SRef<SolAR::api::storage::IWorldGraphManager> m_worldStorage;

};

} // namespace org::openapitools::server::api


#endif // WORLDANCHORSSOLARIMPL_H
